# ==== LF File Manager Config ====

# interpreter for shell commands
set shell bash

# set '-eu' options for shell commands
# These options are used to have safer shell commands. Option '-e' is used to
# exit on error and option '-u' is used to give error for unset variables.
# Option '-f' disables pathname expansion which can be useful when $f, $fs, and
# $fx variables contain names with '*' or '?' characters. However, this option
# is used selectively within individual commands as it can be limiting at
# times.
set shellopts "-eu"

# set internal field separator (IFS) to "\n" for shell commands
# This is useful to automatically split file names in $fs and $fx properly
# since default file separator used in these variables (i.e. 'filesep' option)
# is newline. You need to consider the values of these options and create your
# commands accordingly.
set ifs "\n"

# leave some space at the top and the bottom of the screen
set scrolloff 10

# time formats
set infotimefmtnew "1/02 15:04"
set infotimefmtold "2006-01-02"

# Use the `dim` attribute instead of underline for the cursor in the preview pane
set cursorpreviewfmt "\033[7;2m"

set icons # enable icons
set mouse # enable mouse interaction

# enable custom previewer
set preview
set previewer ~/.config/lf/preview.sh


# ---- KEYMAPS ----
clearmaps # remove default bindings

map ? :maps # show keymaps
map q quit
map R reload
map <esc> reload
map . set hidden! # toggle hidden files

# preview
map <space> $~/.config/lf/preview.sh $f | less -R
map <tab> set preview! # toggle preview column


# -- MOVEMENTS --
map h updir
map j down
map k up
map l open

map <left>  updir
map <down>  down
map <up>    up
map <right> open

map <c-u> half-up
map <c-d> half-down

map <pgup> half-up
map <pgdn> half-down

map gg top
map G  bottom

# mouse wheel
map <m-up>   scroll-up
map <m-down> scroll-down


# -- SEARCH --
map f find
map , find-prev
map ; find-next
map / search
map N search-prev
map n search-next
map F :setfilter; filter # filter


# -- FILE OPERATIONS --
map v :toggle; down # toggle selection
map u unselect # clear selection
map i invert # invert selection
map y
map yy copy
map yp copy-path --full
map yr copy-path --realpath
map yn copy-path --basename
map yb copy-path --basename
map yd copy-path --dirname
map d cut
map c clear # clear copy/cut buffer
map p paste
map D trash $fs # trash selected files
map r rename


# -- SORTING --
map sn :set sortby natural; set info
map se :set sortby ext;     set info
map sa :set sortby atime;   set info atime
map sc :set sortby ctime;   set info ctime
map ss :set sortby size;    set info size
map st :set sortby time;    set info time
map sr set reverse!


# -- FILE INFO --
map zn set info
map za set info atime
map zc set info ctime
map zs set info size
map zt set info time


# -- SHELL INTEGRATION --
map \$ shell
map \% shell-pipe
map \& shell-async
map \! shell-wait

# edit
map e $$EDITOR $f

# enter '!<cursor> $f'
map <enter> push !<space>$f<left><left><left>

# execute current file (must be executable)
map X $$f
map x !$f

# mkdir
map a push %mkdir<space>-p<space>


# ---- COMMANDS ----

# define a custom 'open' command
# This command is called when current file is not a directory. You may want to
# use either file extensions and/or mime types here. Below uses an editor for
# text files and a file opener for the rest.
cmd open &{{
	set -f
	case $(file --mime-type -Lb $f) in
	text/html)
		:
		;;
	text/*)
		lf -remote "send $id \$$EDITOR \$f"
		return
		;;
	esac
	$OPENER $f &>/dev/null
}}

# define a custom 'rename' command without prompt for overwrite
# cmd rename %[ -e $1 ] && printf "file exists" || mv $f $1
# map r push :rename<space>

# make sure trash folder exists
# %mkdir -p ~/.trash

# move current file or selected files to trash folder
# (also see 'man mv' for backup/overwrite options)
cmd trash %{{
	set -f
	if command -v trash &>/dev/null
		then trash $fx
		else mv $fx ~/.trash
	fi
}}

# define a custom 'delete' command
# cmd delete ${{
#     set -f
#     printf "$fx\n"
#     printf "delete?[y/n]"
#     read ans
#     [ "$ans" = "y" ] && rm -rf $fx
# }}

# use '<delete>' key for either 'trash' or 'delete' command
# map <delete> trash
# map <delete> delete

# send path(s) to clipboard
cmd copy-path ${{
	set -f
	_cmd=echo
	case "$1" in
		--realpath) _cmd=realpath ;;
		--basename) _cmd=basename ;;
		--dirname)  _cmd=dirname ;;
	esac
	_r=''
	for _each in $fx; do
		_r="$_r"$'\n'"$($_cmd "$_each")"  # concat with linebreak ($'n')
	done
	_r="${_r:1}"
	if command -v pbcopy &> /dev/null; then
		echo "$_r" | pbcopy
	elif command -v xclip &> /dev/null; then
		echo "$_r" | xclip
	fi
	unset _cmd _r _each
}}

# compress current file or selected files with tar and gunzip
cmd tar ${{
	set -f
	mkdir $1
	cp -r $fx $1
	tar czf $1.tar.gz $1
	rm -rf $1
}}

# compress current file or selected files with zip
cmd zip ${{
	set -f
	mkdir $1
	cp -r $fx $1
	zip -r $1.zip $1
	rm -rf $1
}}

